You are a senior AI developer and DevOps engineer. I am deploying a full-stack JavaScript application (Node.js + React) on an Ubuntu VPS using Coolify for orchestration. I need your help to resolve all production issues and ensure my app is fully working and secure.

‚öôÔ∏è Tech Stack & Context
Backend: Node.js with Express

Frontend: React (or similar SPA)

Build tool: Could be CRA, Vite, or Webpack

Deployment platform: Coolify (self-hosted, Docker-based)

Server platform: Ubuntu VPS

Domain: Using sslip.io for temporary domain

Errors:

Repeated ENOENT: no such file or directory, stat '/dist/public/index.html'

500 Internal Server Errors

Console warnings: Cross-Origin-Opener-Policy ignored, Origin-Agent-Cluster warning

Goal: Serve the frontend through the same Express backend (single build container), no reverse proxy for frontend separately

Current output:

JSON error response: {"error":"Internal server error"}

Server logs show Express can‚Äôt find index.html

‚ùó Key Issues
Frontend build seems missing or not copied to /dist/public/index.html

Express backend crashes when static file isn‚Äôt found

Frontend routing (SPA) may be broken

Not sure how to structure /dist, /public, or /build correctly

Coolify deploys container fine, but frontend fails to load

No HTTPS, which causes some browser warnings

üéØ What I Need
Please walk me through a complete resolution:

‚úÖ Frontend
How to build the React frontend for production

Where that build output lands (build, dist, etc.)

How to copy or mount that output into the Docker image correctly

Best practice: where the index.html should go so Express can serve it

‚úÖ Express Backend
How to serve the static frontend from Express using express.static

How to gracefully handle 404s (no crash if index.html missing)

How to implement SPA fallback (app.get('*', ...))

Correct path config (__dirname, path.join, etc.)

‚úÖ Coolify & Docker
How to configure the Dockerfile:

Should I COPY frontend build to backend container?

Where should it go (/app/dist/public/ or other)?

How to write the Coolify coolify.yaml or use the UI to:

Ensure build runs properly

Ensure volumes and working directories are correct

Serve both frontend + backend from a single container

Should I serve from localhost:5000 or expose 80/443?

‚úÖ Misc / Security / Extras
How to handle HTTP vs HTTPS in a sslip.io test domain (or suggest alternatives like ngrok or custom domain + Let's Encrypt)

Whether to use Nginx or let Express handle static file serving

Directory structure best practice for monorepo-style apps (client/, server/, dist/)

Anything else I should do to make this production-safe

üß™ Bonus:
Include sample folder structure

Dockerfile examples (multi-stage if needed)

Sample Express static server code

Coolify config example

üìå The end result should be a clean, reproducible, one-click Coolify deployment that:

Builds the frontend

Serves it via the backend (not separately)

Loads without 500 errors

Doesn‚Äôt break on frontend routing (SPA)

Avoids any insecure browser warnings

Runs fully in production

